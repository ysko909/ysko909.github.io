<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/git/</link>
    <description>Recent content in Git on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Mon, 25 Aug 2025 13:36:03 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git stashの基本</title>
      <link>https://ysko909.github.io/posts/fundamentals-of-git-stash/</link>
      <pubDate>Mon, 25 Aug 2025 13:36:03 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/fundamentals-of-git-stash/</guid>
      <description>「機能開発の途中だけど、急ぎで別のバグ修正を頼まれた」「まだコミットしたくないけど、他のブランチの様子をちょっと見たい」などなど、開発現場ではこんなふうに作業を中断せざるを得ない場面が頻繁に訪れます。そんな時、あなたはどうしていますか？ 中途半端な状態で無理やりコミットしたり、変更内容をどこかに手動でコピーしたりしていませんか？
そんな悩みを一発で解決してくれる魔法のような機能が、Gitの git stash（スタッシュ） です。この記事を読めば、git stashの概念から応用までを完全にマスターし、あなたの開発効率を劇的に向上させることができます。
git stashとは git stashとは、まだコミットしていない作業内容（変更）を、一時的に別の場所に退避させておく ための機能です。
たとえば、あなたは今、机の上でプラモデルを作っています。パーツを切り出し、接着剤でくっつけ始めたところです（＝コーディング中）。そこへ急な来客があり、机をすぐに片付けなければならなくなりました（＝緊急の修正依頼）。この時、作りかけのプラモデルを箱にしまって、机の上を一旦まっさらにしますよね。来客対応が終わったら、また箱から取り出して作業を再開できます。
この「一時的に箱にしまう」という行為が、まさにgit stashです。git stashを使うと、作業ディレクトリを最後にコミットしたきれいな状態に戻せるので、安心して別の作業に取り掛かることができます。
git stashの基本的な使い方 git stashの操作は非常にシンプルです。基本的な流れは以下の3ステップです。
 退避 確認 復元  作業を退避する (git stash / git stash push) 現在のブランチで行った変更を一時退避させます。最も基本的なコマンドは git stash ですが、これは git stash push の省略形です。
どの作業を退避させたか後で分かるように、メッセージを付けておくことを推奨します。メッセージを付けるには push サブコマンドと -m ( --message ) オプションを使います。メッセージを付与しておかないと、後で見返したときに「これなんの履歴だっけ？」となること請け合いです。とくに、git stash popせずstashリストに残りっぱなしだとこうなりがち。
# メッセージを付けてstashに退避 $ git stash push -m &amp;#34;WIP: ログイン画面のUI調整中&amp;#34; Saved working directory and index state On feature/new-login: WIP: ログイン画面のUI調整中 もちろん、メッセージ無しで退避することも可能です。</description>
    </item>
    
    <item>
      <title>.gitignoreファイルの効果的な作成方法と運用</title>
      <link>https://ysko909.github.io/posts/fundamentals-of-gitignore/</link>
      <pubDate>Tue, 14 Jan 2025 12:01:18 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/fundamentals-of-gitignore/</guid>
      <description>はじめに Gitでプロジェクトを管理する際、すべてのファイルをバージョン管理する必要はありません。むしろ、適切に管理対象を選別することで、効率的で安全なプロジェクト運用が可能になります。本記事では、.gitignoreファイルの基礎から実践的な運用方法まで、GitHub公式テンプレートを活用しながら詳しく解説します。
.gitignoreファイルの基本 .gitignoreとは .gitignoreファイルは、Gitのバージョン管理から除外したいファイルやフォルダを指定するための設定ファイルです。テキスト形式で記述され、指定されたパターンに一致するファイルは自動的に無視されます。
なぜ.gitignoreが必要か Gitでプロジェクトを管理していると、「このファイルは管理したくないな&amp;hellip;」と思うことがありますよね。そんなときに活躍するのが.gitignoreファイルです。では具体的に、なぜこのファイルが必要なのでしょうか？
リポジトリをスッキリと保つため 「リポジトリの容量が大きくなりすぎて、クローンに時間がかかる&amp;hellip;」なんて経験ありませんか？
 コンパイルして生成されるファイルや、node_modulesのような依存パッケージは、その度に自動生成できるので管理する必要がありません これらを除外することで、リポジトリのサイズを適切に保ち、git cloneやpullの操作がサクサク動くようになります 結果として、ストレージの使用量も最適化できます  機密情報を守るため 「あっ！APIキーをうっかりコミットしちゃった！」&amp;hellip;こんなヒヤッとする経験は誰にでもあるはず。
 APIキーやパスワードなどの機密情報を含むファイルを自動で除外 開発環境ごとに異なる設定ファイルも、誤ってコミットされるのを防げます チーム全体のセキュリティレベルを保つことができます  開発をスムーズに進めるため 「自分の環境では動くのに、チームメンバーの環境だと動かない&amp;hellip;」というトラブル、よくありますよね。
 各開発者の環境に依存するファイル（IDEの設定ファイルなど）を除外できる ビルド時に生成されるファイルやキャッシュを管理対象から外せる その結果、チームメンバー間での余計な競合を防ぎ、開発に集中できます  具体例を見てみましょう 普段の開発で遭遇する、こんな場面で.gitignoreが活躍します。
# 例えば、こんなファイルは管理したくないですよね /node_modules # npmパッケージ（数百MBになることも！） .env # 環境変数（APIキーなどの機密情報） .vscode/ # VSCodeの設定（人によって違う） *.log # ログファイル（その場限りの情報） dist/ # ビルド成果物（自動生成できる） これらのファイルを.gitignoreで除外することで、リポジトリは必要なソースコードだけをスッキリと管理でき、チーム開発もスムーズに進められます。つまり、.gitignoreは「不要なものを適切に除外する」ことで、プロジェクトの管理を効率的にしてくれる、とても便利な道具なんです。
.gitignoreファイルの書き方 基本的な記法 # コメント行 file.txt # 特定のファイルを無視 *.log # 特定の拡張子を持つすべてのファイルを無視 build/ # フォルダ全体を無視 /node_modules # ルートフォルダの特定フォルダを無視 **/*.tmp # すべてのフォルダ下の特定パターンを無視 !important.log # 無視リストから除外（管理対象として追加） パターンマッチングのルール  / で始まる場合：プロジェクトルートからの相対パス * : 任意の文字列（フォルダ区切り文字を除く） ** : 任意のフォルダ階層 !</description>
    </item>
    
    <item>
      <title>他ブランチからファイルをコピーする</title>
      <link>https://ysko909.github.io/posts/copy-files-from-other-branch/</link>
      <pubDate>Wed, 10 Jan 2024 23:19:23 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/copy-files-from-other-branch/</guid>
      <description> 概要 たまに「任意のブランチに、他ブランチからファイルをコピーしたいなー」という場面があります。
たとえば、GitHub Pagesで公開するためにgh-pagesブランチにビルド済みのファイルのみ置いておきたい、という場合がそうでしょうか。この場合、mainブランチではビルド前のソースコードやアセット用ファイルなどの他に、npmやyarnでビルドしたビルド済みファイルがあると思います（これらのファイルやフォルダが.gitignoreの対象だったら、この限りではない）。gh-pagesブランチには、このビルド済みのファイルだけが必要なので、mainブランチから必要な分だけのファイルをコピーしたいわけです。
ここでは、別ブランチからファイルをコピーするときの手順についてメモしておきます。
コピー手順 ここで想定している操作としては、「任意のブランチに対して、mainブランチからファイルをコピーする」です。つまり、これから紹介する手順だと、mainブランチがコピー元になります。
別ブランチにファイルをコピーするには、git checkoutを利用します。一応、いったんコピー前にファイルのアドレスなどをgit showを使って確認しておいた方が良いと思います。
 任意のブランチを新規作成する。 作成したブランチに切り替える。 git showコマンドでコピー元のファイルのアドレスを確認する。 git checkoutコマンドでファイルを新しいブランチにコピーする。 変更をコミットする。  ざっくり手順を書き出すと上記のようになります。このように、git checkoutを使ったファイルのコピーは、今いるブランチがコピー先になるのでこの点は注意が必要です。
任意のブランチを新規作成する git checkout -b new_branch おなじみの、ブランチを作成するコマンドを実行します。これで新規ブランチが作成できます。
作成したブランチに切り替える git checkout new_branch コピー先である、新規ブランチに移動します。
git showコマンドでコピー元のファイルのアドレスを確認する いったんコピー元のファイルについて、その在り処を確認しておきます。「もう場所もファイル名もバッチリわかってるぜ！」という場合は、この手順を飛ばしてしまってもいいと思います。
git show main:path/to/file1 git show main:path/to/file2  コピー元ブランチ名:ファイルパスの形式で指定します。
上記のコマンドを実行すると、指定したファイルの内容が表示されます。このとき、参照する対象についてファイルでなくフォルダを指定した場合は、そのフォルダに格納されているファイルの一覧が表示されます。
git checkoutコマンドでファイルを新しいブランチにコピーする いよいよ別ブランチからファイルをコピーしてきます。
git checkout main -- path/to/file1 path/to/file2 git checkoutを利用し、前の手順で確認したファイルパスを指定します。
上記を実行すると、現在のブランチにフォルダ構造ごとファイルがコピーされます。ファイル単体だけでなく、フォルダ構成もコピー対象であることに注意です。上記であれば、path/to/file1というフォルダ構成で現在のブランチにコピーされます。
もし、現在のブランチではコピー元とは別のフォルダ構成にしたい場合、いったんコピーしたあとでフォルダを新規作成しファイルを移動するなどして、フォルダ構成を変更する必要があります。ここだけは若干面倒かもしれません。
変更をコミットする git commit -m &amp;#34;Add some files from main&amp;#34; 現在のブランチでの変更をコミットします。これで今までの操作が当ブランチに反映されました。
参考  git show git checkout Git で特定のブランチからファイルをコピーする  </description>
    </item>
    
    <item>
      <title>GitHubからRepository not found.と言われたらキーチェーンを見てみよう</title>
      <link>https://ysko909.github.io/posts/can-not-access-to-github-with-git/</link>
      <pubDate>Mon, 11 May 2020 22:02:34 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/can-not-access-to-github-with-git/</guid>
      <description>Macの話なんですけどね Missing or invalid credentials. Skip silent fetch commands remote: Repository not found. ある日、いつもの通りブログをチョロっと書いてGitHubのリポジトリにpushしようとしたら、「Repository not found.」とか言われたわけです。リポジトリがないよ、って言っているわけですね。
ないわけないだろ。
ないわけないじゃないですかやだー つい最近作ったばっかりだったら「リポジトリ名間違えたかなー」とか思うわけですけど、もう何ヶ月も同じリポジトリ使ってるわけで、稼働実績があるリポジトリなわけです。だから、「リポジトリが見つからないよ」って言われたところで、そんなわけないだろってなるわけです。
エラーのメッセージをよくよく見てみると「リポジトリないよ」って言っている前にMissing or invalid credentials.って言ってるんですよね。認証情報のエラーなんだけど、認証情報を入力できない。
リポジトリを作ってはじめてpullとかする場合、認証画面が表示されたりコンソールなら入力を求められるはずです。それすら表情されない。あれ、これって結構重症？
Macのキーチェーンアクセスを見てみる GitHubに限りませんが、Macの場合認証情報をキーチェーンアクセスというアプリケーションで管理しています。ここに格納されているGitHub用の認証情報がコケてるんじゃね？
というわけでおもむろに確認してみます。
アプリケーションからユーティリティのフォルダを開いて、その中の「キーチェーンアクセス」をクリックします。すると保持している認証情報の一覧が表示されます。
ウィンドウの右上にある検索窓へ「GitHub」と入力します。するとGitHub用の認証情報が表示されるはずです。
表示されたら、そいつは削除します。右クリックメニューから削除を選択します。
きれいサッパリ削除が完了したのを確認したら、キーチェーンアクセスは閉じて構いません。
さあどうだ おもむろにgit pullしてみます。
$ git pull Username for &amp;#39;https://github.com&amp;#39;: というわけで、認証情報の入力を求められました。再度正しい情報を入力すれば、また普段どおりpullやpushが実行できるようになります。
まとめ とくに何か特別な作業をやった記憶はないのですが、たまにこういうことも起こり得るようです。というわけで、なにかのお役に立てば幸いです。</description>
    </item>
    
    <item>
      <title>Visual Studio CodeでGitが見つからないと言われたら</title>
      <link>https://ysko909.github.io/posts/fix-git-path-with-vscode/</link>
      <pubDate>Sun, 07 Jul 2019 17:14:15 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/fix-git-path-with-vscode/</guid>
      <description>VS Codeをアップデートしたらこんなメッセージが Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。
「Gitが見つからないよ！」って・・・いや、君今までしこたまGit使ってたじゃないか。
理由はともかく、このままではGitの各種コマンドが利用できないので、設定します。
環境  macOS Mojave 10.14.5 Visual Studio Code version 1.36  設定手順  左下の歯車マークから、あるいはCommand + ,で「Settings」画面を表示します。
 出てきた画面に「git.path」と入力します。すると、「Settings.jsonで設定してね」と言われるのでSettings.jsonを開きます。
ごちゃごちゃしてますが、下のところに&amp;quot;git.path&amp;quot;: &amp;quot;/usr/bin&amp;quot;を追記しました。なお、gitのパスはコンソール画面にてwhich gitすればわかります。
 編集が終わったら保存します。これで完了です。なお、いつのバージョン以降からかは失念しましたが、設定の変更を行ってもVS Codeを再起動する必要はなく即時反映されます。
  （番外編）XcodeをインストールしたらなぜかGitが使えないぞ XcodeをインストールしたらGitが使えなくなりました。なんかライセンス契約に同意する必要があるみたいです。
指示に従いコマンド発行および同意を行ったら、Gitが再び利用できるようになりました。
$ git --version Agreeing to the Xcode/iOS license requires admin privileges, please run “sudo xcodebuild -license” and then retry this command. $ sudo xcodebuild -license You have not agreed to the Xcode license agreements.</description>
    </item>
    
  </channel>
</rss>