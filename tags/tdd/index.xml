<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/tdd/</link>
    <description>Recent content in Tdd on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Fri, 17 Oct 2025 15:40:48 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD（テスト駆動開発）の基本</title>
      <link>https://ysko909.github.io/posts/fundamentals-of-tdd/</link>
      <pubDate>Fri, 17 Oct 2025 15:40:48 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/fundamentals-of-tdd/</guid>
      <description>TL;DR テスト駆動開発（以下、TDD）は「テストを先に書く→最小のコードで通す→安全にリファクタ」の短いサイクルで、品質・設計の健全性・変更耐性を高めます。アジャイルの一部で使われることが多いですが、目的が異なる独立のプラクティスです。
本記事では、TDDの基本的な考え方から、他の開発手法との比較、そしてPythonとpytestを使った具体的な実践例までを解説します。
TDDとは システム開発では、「品質の高いコードを、いかに効率よく書くか」という課題に日々向き合っています。その解決策の一つとして、テスト駆動開発（TDD: Test-Driven Development）という手法があります。
2000年代にTDDが登場してからすでにかなり時間が経っているため、なんで今さらTDD？と思うかもしれません。それは、昨今生成AIのコード生成能力が上がったことで、「コードを書く」ことより、求める仕様を明確化することが重要になってきたからです。これからの開発者には、「良いコードを書く」こと以上に、「良い設計を育てる」「品質を保つ」スキルが求められます。そこでこのTDDは、そのための強力な武器となるわけです。TDDの手法上、先にテストを書くことで求める仕様を明確にできることから、生成AIの力を最大限に引き出すことができます。ということで、生成AIとの相性が良いTDDを改めて学んでみる価値が出てきたというわけです。
「レッド・グリーン・リファクタリング」のサイクル TDDは、プログラムの実装コードを書く前に、そのコードが満たすべき仕様をテストコードとして先に記述する開発手法です。このアプローチの核心は、以下の3つのステップを短いサイクルで繰り返すことにあります。
 レッド (Red): まず、失敗するテストを書きます。これから実装したい機能に対するテストコードを記述しますが、まだ機能自体は存在しないため、このテストは必ず失敗します。テストフレームワークが赤色でエラーを示すことから「レッド」と呼ばれます。これは「何を達成すべきか」を明確に定義するステップです。 グリーン (Green): 次に、レッドフェーズで書いたテストが成功する（パスする）ための最小限の実装コードを書きます。ここではコードの綺麗さや効率は一旦無視し、とにかくテストをパスさせることだけを目指します。テストが成功すると緑色で示されることから「グリーン」と呼ばれます。 リファクタリング (Refactoring): テストが成功しているという安心感を「セーフティネット」として、コードの構造を改善します。重複したコードをまとめたり、変数名を分かりやすくしたりと、設計をより良くするためのリファクタリングを行います。リファクタリング後も、テストが成功し続けることを随時確認します。  この「レッド → グリーン → リファクタリング」という小さなサイクルを繰り返すことで、一つひとつの機能を確実に、かつクリーンな設計で実装していくのがTDDの基本的な流れです。
他開発手法との比較 TDDは他の開発手法とどう違うのでしょうか。代表的なものと比較してみましょう。
| 開発手法 | 特徴 | TDDとの関係性 | |&amp;ndash;||| | ウォーターフォール | 「要件定義→設計→実装→テスト」という工程を順番に進める。後戻りは原則しない。 | 対照的。 TDDでは実装とテストが非常に短いサイクルで行われるのに対し、ウォーターフォールではテストは実装がすべて完了した後の独立した工程として扱われます。 | | アジャイル開発 | 小さな機能単位で「計画→設計→実装→テスト」のサイクルを繰り返す。TDDはこのアジャイルの文脈で採用されることが多い。 | 補完的。 TDDはアジャイル開発の各イテレーション（反復）の中で、個々の機能の実装品質を高めるための具体的なプラクティス（実践方法）と言えます。アジャイル開発でも、必ずしもTDDが採用されるわけではありません（実装後にテストを書く場合もあります）。 | | BDD (ビヘイビア駆動開発) | TDDから派生した手法。テストを「システムの振る舞い（Behavior）」という観点から、より自然言語に近い形で記述する。「顧客やPMも読める仕様書」としての側面が強い。 | 発展的。 TDDが「開発者の視点」で関数の入出力などをテストするのに対し、BDDは「ユーザーやビジネスの視点」でシステムの振る舞いを記述します。使うツールもGherkin（Given-When-Then形式）などが有名です。 |
この中で、TDDとアジャイルは比較的近い位置にいるため、TDDがアジャイルで採用されることもあります。しかし、これらは厳密に言うと目的が異なる別軸の手法です。
| 観点 | アジャイル開発 | TDD | |||| | 目的 | 短いイテレーションで価値提供を最大化 | コードの品質・設計の健全性を担保 | | 中心 | ユーザーストーリー／バックログ | テスト（仕様の明文化） | | 適用範囲 | プロセス・チーム運営 | 実装の手法・設計の育て方 | | 主な効果 | 変更への柔軟性、早いフィードバック | バグの早期発見、リファクタの安全網 | | 課題 | テスト戦略が薄いと品質リスク | 初期コスト、学習曲線、過剰テストのリスク |</description>
    </item>
    
  </channel>
</rss>